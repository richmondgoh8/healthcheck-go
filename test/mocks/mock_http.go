// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/client/client.go

// Package mock_client is a generated GoMock package.
package mock_client

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomHTTP is a mock of CustomHTTP interface.
type MockCustomHTTP struct {
	ctrl     *gomock.Controller
	recorder *MockCustomHTTPMockRecorder
}

// MockCustomHTTPMockRecorder is the mock recorder for MockCustomHTTP.
type MockCustomHTTPMockRecorder struct {
	mock *MockCustomHTTP
}

// NewMockCustomHTTP creates a new mock instance.
func NewMockCustomHTTP(ctrl *gomock.Controller) *MockCustomHTTP {
	mock := &MockCustomHTTP{ctrl: ctrl}
	mock.recorder = &MockCustomHTTPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomHTTP) EXPECT() *MockCustomHTTPMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCustomHTTP) Get(url string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCustomHTTPMockRecorder) Get(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCustomHTTP)(nil).Get), url)
}
